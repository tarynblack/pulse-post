function loadmfixparameters
%LOADMFIXPARAMETERS defines values based on simulation parameters.
%   
%   This script loads the file mfixconst.txt generated by the MFIX
%   simulation. mfixconst.txt contains constants that define the
%   post-processing parameters for that simulation. The contents of
%   mfixconst.txt are specified in write_out0.f of the MFIX code base.
%
%   The parameters loaded from mfixconst.txt are:
%       IMAX:   number of cells in x direction
%       JMAX:   number of cells in y direction
%       KMAX:   number of cells in z direction
%           *** NOTE: this function adds 4 domain ghost cells to each *MAX
%       LENGTH: size of domain in x direction (meters)
%       HEIGHT: size of domain in y direction (meters)
%       WIDTH:  size of domain in z direction (meters)
%       RO_S#:  solid density of phase# particles (kg/m3)
%       NFR_S#: number fraction of phase# particles (sum of NFR_S# == 1)
%       PULSE:  describes whether flow is pulsing (T) or steady (F)
%       FREQUENCY:   frequency of pulsing, for PULSE=T
%           *** NOTE: FREQ returns a value for PULSE=F that is not used.
%           *** NOTE: multiplied by 2 because MFIX frequency uses an
%               absolute value function such that there end up being two pulses
%       MINIMUM_EPG:   minimum gas volume fraction (unsteady flow)
%       MAXIMUM_EPG:   maximum gas volume fraction (unsteady flow)
%       VENT_R: radius of vent [m]
%       DT:     time interval between each data write in the simulation
%       END_T:  end time of simulation [s]
%       ATMOS:  describes whether simulation runs with atmospheric
%               temperature, density, etc. conditions defined by the
%               equation of state (T) or not (F)
%       TROPO:  altitude of tropopause [m]
%       BC_EPG: inlet gas volume fraction (constant for steady case)
%       BC_PG:  inlet gas pressure [Pa, or N/m2]
%       BC_TG:  inlet gas temperature [K]
%       BC_TS#: inlet temperature of phase# particles [K]
%       D_S#:   diameter of phase# particles (m)
%
%   Last edit: Taryn Black, 24 June 2016

% ======================================================================= %

%   Global variables that are defined
    global IMAX JMAX KMAX
    global LENGTH HEIGHT WIDTH
    global RO_S1 RO_S2 RO_S3
    global NFR_S1 NFR_S2 NFR_S3 
    global PULSE FREQUENCY
    global MINIMUM_EPG MAXIMUM_EPG
    global VENT_R
    global DT END_T
    global ATMOS TROPO
    global BC_EPG BC_PG BC_TG BC_TS1 BC_TS2 BC_TS3
    global D_S1 D_S2 D_S3

%   Global variables that are used
    global DATAPATH POSTPATH TIME_STOP GHOSTCELLS_IJK

%   Read in second column of mfixconst (containing values) as a cell array
%   of strings
    cd(DATAPATH)
    fid = fopen('mfixconst');
    data = textscan(fid, '%*s %s');
    fclose(fid);
    cd(POSTPATH)

%   Convert to data structure to save each cell as desired type
    Cnsts = cell2struct(data,{'data'},1);
    
    IMAX   = str2double(Cnsts.data(1)) + GHOSTCELLS_IJK(1);
    JMAX   = str2double(Cnsts.data(2)) + GHOSTCELLS_IJK(2);
    KMAX   = str2double(Cnsts.data(3)) + GHOSTCELLS_IJK(3);
    LENGTH = str2double(Cnsts.data(4));
    HEIGHT = str2double(Cnsts.data(5));
    WIDTH  = str2double(Cnsts.data(6));
    RO_S1  = str2double(Cnsts.data(7));
    RO_S2  = str2double(Cnsts.data(8));
    RO_S3  = str2double(Cnsts.data(9));
    NFR_S1 = str2double(Cnsts.data(10));
    NFR_S2 = str2double(Cnsts.data(11));
    NFR_S3 = str2double(Cnsts.data(12));
    PULSE  = char(Cnsts.data(13));
    FREQUENCY   = 2*str2double(Cnsts.data(14));
    MINIMUM_EPG   = str2double(Cnsts.data(15));
    MAXIMUM_EPG   = str2double(Cnsts.data(16));
    VENT_R = str2double(Cnsts.data(17));
    DT     = str2double(Cnsts.data(18));
    END_T  = str2double(Cnsts.data(19));
    ATMOS  = char(Cnsts.data(20));
    TROPO  = str2double(Cnsts.data(21));
    BC_EPG = str2double(Cnsts.data(22));
    BC_PG  = str2double(Cnsts.data(23));
    BC_TG  = str2double(Cnsts.data(24));
    BC_TS1 = str2double(Cnsts.data(25));
    BC_TS2 = str2double(Cnsts.data(26));
    BC_TS3 = str2double(Cnsts.data(27));
    D_S1   = str2double(Cnsts.data(28));
    D_S2   = str2double(Cnsts.data(29));
    D_S3   = str2double(Cnsts.data(30));
% ----------------------------------------------------------------------- %

%% Replace user-defined TIME_STOP with END_T if necessary.
%   Replace user-defined TIME_STOP with simulation-defined END_T if
%   TIME_STOP is undefined or exceeds simulation length.
    if isempty(TIME_STOP) || TIME_STOP >= END_T
        TIME_STOP = END_T;
    end

%% ===================================================================== %%
end

